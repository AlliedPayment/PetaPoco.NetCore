<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PetaPoco.NetCore</name>
    </assembly>
    <members>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``1">
            <summary>
            Reads from a GridReader, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <returns>An enumerable collection of result records</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``2">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``3">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``4">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``3(System.Func{``0,``1,``2})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.IGridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="T:PetaPoco.NetCore.GridReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.#ctor(PetaPoco.NetCore.Database,System.Data.IDbCommand,System.Data.IDataReader,PetaPoco.NetCore.IMapper)">
            <summary>
            The control structure for a multi-result set query
            </summary>
            <param name="database"></param>
            <param name="command"></param>
            <param name="reader"></param>
            <param name="defaultMapper"></param>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``1">
            <summary>
            Reads from a GridReader, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <returns>An enumerable collection of result records</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``2">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``3">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``4">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``3(System.Func{``0,``1,``2})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.SinglePocoFromIDataReader``1(System.Int32)">
            <summary>
            Read data to a single poco
            </summary>
            <typeparam name="T">The type representing a row in the result set</typeparam>
            <param name="index">Reader row to be read from the underlying IDataReader</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.MultiPocoFromIDataReader``1(System.Int32,System.Type[],System.Object)">
            <summary>
            Read data to multiple pocos
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="index">Reader row to be read from the underlying IDataReader</param>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.NextResult">
            <summary>
            Advance the IDataReader to the NextResult, if available
            </summary>
        </member>
        <member name="M:PetaPoco.NetCore.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader, command and shared connection
            </summary>
        </member>
        <member name="M:PetaPoco.NetCore.Database.OnException(System.Exception)">
            <summary>
            Override this to log/capture exceptions
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:PetaPoco.NetCore.Database.QueryMultiple(PetaPoco.NetCore.Sql)">
            <summary>
            Perform a multi-results set query
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A GridReader to be queried</returns>
        </member>
        <member name="M:PetaPoco.NetCore.Database.QueryMultiple(System.String,System.Object[])">
            <summary>
            Perform a multi-results set query
            </summary>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A GridReader to be queried</returns>
        </member>
    </members>
</doc>
